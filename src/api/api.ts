/* tslint:disable */
/* eslint-disable */
/**
 * maxon back
 * Makson zon zon
 *
 * The version of the OpenAPI document: development
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CardBody
 */
export interface CardBody {
    /**
     * 
     * @type {number}
     * @memberof CardBody
     */
    'user_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CardBody
     */
    'card_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CardBody
     */
    'card_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CardBody
     */
    'current_level'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CardBody
     */
    'auto_clicker'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CardBody
     */
    'updated_at'?: number;
    /**
     * 
     * @type {number}
     * @memberof CardBody
     */
    'created_at'?: number;
}
/**
 * 
 * @export
 * @interface CardUpdateBody
 */
export interface CardUpdateBody {
    /**
     * 
     * @type {string}
     * @memberof CardUpdateBody
     */
    'card_name'?: CardUpdateBodyCardNameEnum;
}

export const CardUpdateBodyCardNameEnum = {
    PowerClick: 'power_click',
    AutoClicker: 'auto_clicker',
    EnergyBooster: 'energy_booster'
} as const;

export type CardUpdateBodyCardNameEnum = typeof CardUpdateBodyCardNameEnum[keyof typeof CardUpdateBodyCardNameEnum];

/**
 * 
 * @export
 * @interface CardsBody
 */
export interface CardsBody {
    /**
     * 
     * @type {number}
     * @memberof CardsBody
     */
    'count'?: number;
    /**
     * 
     * @type {Array<CardBody>}
     * @memberof CardsBody
     */
    'user_cards'?: Array<CardBody>;
}
/**
 * 
 * @export
 * @interface GetNearBody
 */
export interface GetNearBody {
    /**
     * 
     * @type {string}
     * @memberof GetNearBody
     */
    'receiving_wallet'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetNearBody
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetNearBody
     */
    'token_contract'?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface NearTransit
 */
export interface NearTransit {
    /**
     * 
     * @type {string}
     * @memberof NearTransit
     */
    'result'?: string;
}
/**
 * 
 * @export
 * @interface ReferralBalance
 */
export interface ReferralBalance {
    /**
     * 
     * @type {number}
     * @memberof ReferralBalance
     */
    'referral_balance': number;
}
/**
 * 
 * @export
 * @interface ReferralLink
 */
export interface ReferralLink {
    /**
     * 
     * @type {string}
     * @memberof ReferralLink
     */
    'referral_link': string;
}
/**
 * 
 * @export
 * @interface StartEnergyCollectBody
 */
export interface StartEnergyCollectBody {
    /**
     * 
     * @type {string}
     * @memberof StartEnergyCollectBody
     */
    'current_energy_token': string;
}
/**
 * 
 * @export
 * @interface TapTokenBody
 */
export interface TapTokenBody {
    /**
     * 
     * @type {string}
     * @memberof TapTokenBody
     */
    'tap_token': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'tg_id': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'balance': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'upgrade_level'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'wallet': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'energy': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'referral_balance'?: number;
}
/**
 * 
 * @export
 * @interface WalletBody
 */
export interface WalletBody {
    /**
     * 
     * @type {string}
     * @memberof WalletBody
     */
    'wallet': string;
}

/**
 * AutoClickerApi - axios parameter creator
 * @export
 */
export const AutoClickerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Start Auto Clicker
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAutoClicker: async (tgId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('startAutoClicker', 'tgId', tgId)
            const localVarPath = `/start_auto_clicker/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop Auto Clicker
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopAutoClicker: async (tgId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('stopAutoClicker', 'tgId', tgId)
            const localVarPath = `/stop_auto_clicker/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutoClickerApi - functional programming interface
 * @export
 */
export const AutoClickerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AutoClickerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Start Auto Clicker
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAutoClicker(tgId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startAutoClicker(tgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutoClickerApi.startAutoClicker']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Stop Auto Clicker
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopAutoClicker(tgId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopAutoClicker(tgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutoClickerApi.stopAutoClicker']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AutoClickerApi - factory interface
 * @export
 */
export const AutoClickerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AutoClickerApiFp(configuration)
    return {
        /**
         * 
         * @summary Start Auto Clicker
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAutoClicker(tgId: number, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.startAutoClicker(tgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stop Auto Clicker
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopAutoClicker(tgId: number, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.stopAutoClicker(tgId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AutoClickerApi - object-oriented interface
 * @export
 * @class AutoClickerApi
 * @extends {BaseAPI}
 */
export class AutoClickerApi extends BaseAPI {
    /**
     * 
     * @summary Start Auto Clicker
     * @param {number} tgId The tg ID of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoClickerApi
     */
    public startAutoClicker(tgId: number, options?: RawAxiosRequestConfig) {
        return AutoClickerApiFp(this.configuration).startAutoClicker(tgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stop Auto Clicker
     * @param {number} tgId The tg ID of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoClickerApi
     */
    public stopAutoClicker(tgId: number, options?: RawAxiosRequestConfig) {
        return AutoClickerApiFp(this.configuration).stopAutoClicker(tgId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardsApi - axios parameter creator
 * @export
 */
export const CardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get User Cards
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCards: async (tgId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('getUserCards', 'tgId', tgId)
            const localVarPath = `/get_user_cards/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User Card
         * @param {number} tgId The tg ID of user
         * @param {CardUpdateBody} cardUpdateBody Card Update Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserCard: async (tgId: number, cardUpdateBody: CardUpdateBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('updateUserCard', 'tgId', tgId)
            // verify required parameter 'cardUpdateBody' is not null or undefined
            assertParamExists('updateUserCard', 'cardUpdateBody', cardUpdateBody)
            const localVarPath = `/update_user_card/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cardUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardsApi - functional programming interface
 * @export
 */
export const CardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get User Cards
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCards(tgId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardsBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCards(tgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsApi.getUserCards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update User Card
         * @param {number} tgId The tg ID of user
         * @param {CardUpdateBody} cardUpdateBody Card Update Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserCard(tgId: number, cardUpdateBody: CardUpdateBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserCard(tgId, cardUpdateBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsApi.updateUserCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CardsApi - factory interface
 * @export
 */
export const CardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get User Cards
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCards(tgId: number, options?: RawAxiosRequestConfig): AxiosPromise<CardsBody> {
            return localVarFp.getUserCards(tgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User Card
         * @param {number} tgId The tg ID of user
         * @param {CardUpdateBody} cardUpdateBody Card Update Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserCard(tgId: number, cardUpdateBody: CardUpdateBody, options?: RawAxiosRequestConfig): AxiosPromise<CardBody> {
            return localVarFp.updateUserCard(tgId, cardUpdateBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardsApi - object-oriented interface
 * @export
 * @class CardsApi
 * @extends {BaseAPI}
 */
export class CardsApi extends BaseAPI {
    /**
     * 
     * @summary Get User Cards
     * @param {number} tgId The tg ID of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public getUserCards(tgId: number, options?: RawAxiosRequestConfig) {
        return CardsApiFp(this.configuration).getUserCards(tgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User Card
     * @param {number} tgId The tg ID of user
     * @param {CardUpdateBody} cardUpdateBody Card Update Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public updateUserCard(tgId: number, cardUpdateBody: CardUpdateBody, options?: RawAxiosRequestConfig) {
        return CardsApiFp(this.configuration).updateUserCard(tgId, cardUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EnergyApi - axios parameter creator
 * @export
 */
export const EnergyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Start Energy Offline
         * @param {number} tgId The tg ID of user
         * @param {StartEnergyCollectBody} startEnergyCollectBody Start Energy Collect Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startEnergyOffline: async (tgId: number, startEnergyCollectBody: StartEnergyCollectBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('startEnergyOffline', 'tgId', tgId)
            // verify required parameter 'startEnergyCollectBody' is not null or undefined
            assertParamExists('startEnergyOffline', 'startEnergyCollectBody', startEnergyCollectBody)
            const localVarPath = `/start_energy_collect/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startEnergyCollectBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop Energy Offline
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopEnergyOffline: async (tgId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('stopEnergyOffline', 'tgId', tgId)
            const localVarPath = `/stop_energy_collect/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnergyApi - functional programming interface
 * @export
 */
export const EnergyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnergyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Start Energy Offline
         * @param {number} tgId The tg ID of user
         * @param {StartEnergyCollectBody} startEnergyCollectBody Start Energy Collect Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startEnergyOffline(tgId: number, startEnergyCollectBody: StartEnergyCollectBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startEnergyOffline(tgId, startEnergyCollectBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EnergyApi.startEnergyOffline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Stop Energy Offline
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopEnergyOffline(tgId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopEnergyOffline(tgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EnergyApi.stopEnergyOffline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EnergyApi - factory interface
 * @export
 */
export const EnergyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnergyApiFp(configuration)
    return {
        /**
         * 
         * @summary Start Energy Offline
         * @param {number} tgId The tg ID of user
         * @param {StartEnergyCollectBody} startEnergyCollectBody Start Energy Collect Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startEnergyOffline(tgId: number, startEnergyCollectBody: StartEnergyCollectBody, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.startEnergyOffline(tgId, startEnergyCollectBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stop Energy Offline
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopEnergyOffline(tgId: number, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.stopEnergyOffline(tgId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnergyApi - object-oriented interface
 * @export
 * @class EnergyApi
 * @extends {BaseAPI}
 */
export class EnergyApi extends BaseAPI {
    /**
     * 
     * @summary Start Energy Offline
     * @param {number} tgId The tg ID of user
     * @param {StartEnergyCollectBody} startEnergyCollectBody Start Energy Collect Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyApi
     */
    public startEnergyOffline(tgId: number, startEnergyCollectBody: StartEnergyCollectBody, options?: RawAxiosRequestConfig) {
        return EnergyApiFp(this.configuration).startEnergyOffline(tgId, startEnergyCollectBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stop Energy Offline
     * @param {number} tgId The tg ID of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyApi
     */
    public stopEnergyOffline(tgId: number, options?: RawAxiosRequestConfig) {
        return EnergyApiFp(this.configuration).stopEnergyOffline(tgId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NearApi - axios parameter creator
 * @export
 */
export const NearApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Transit Near
         * @param {GetNearBody} getNearBody Get Near
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transitNear: async (getNearBody: GetNearBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getNearBody' is not null or undefined
            assertParamExists('transitNear', 'getNearBody', getNearBody)
            const localVarPath = `/near_transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getNearBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NearApi - functional programming interface
 * @export
 */
export const NearApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NearApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Transit Near
         * @param {GetNearBody} getNearBody Get Near
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transitNear(getNearBody: GetNearBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NearTransit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transitNear(getNearBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NearApi.transitNear']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NearApi - factory interface
 * @export
 */
export const NearApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NearApiFp(configuration)
    return {
        /**
         * 
         * @summary Transit Near
         * @param {GetNearBody} getNearBody Get Near
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transitNear(getNearBody: GetNearBody, options?: RawAxiosRequestConfig): AxiosPromise<NearTransit> {
            return localVarFp.transitNear(getNearBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NearApi - object-oriented interface
 * @export
 * @class NearApi
 * @extends {BaseAPI}
 */
export class NearApi extends BaseAPI {
    /**
     * 
     * @summary Transit Near
     * @param {GetNearBody} getNearBody Get Near
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NearApi
     */
    public transitNear(getNearBody: GetNearBody, options?: RawAxiosRequestConfig) {
        return NearApiFp(this.configuration).transitNear(getNearBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bind User Wallet
         * @param {number} tgId The tg ID of user
         * @param {WalletBody} walletBody Wallet body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindUserWallet: async (tgId: number, walletBody: WalletBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('bindUserWallet', 'tgId', tgId)
            // verify required parameter 'walletBody' is not null or undefined
            assertParamExists('bindUserWallet', 'walletBody', walletBody)
            const localVarPath = `/bind_user_wallet/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Collect Referral Earn
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectReferralEarn: async (tgId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('collectReferralEarn', 'tgId', tgId)
            const localVarPath = `/collect_referral_earn/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Referral User
         * @param {number} tgId The tg ID of user
         * @param {ReferralLink} referralLink Referral Link Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferralUser: async (tgId: number, referralLink: ReferralLink, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('createReferralUser', 'tgId', tgId)
            // verify required parameter 'referralLink' is not null or undefined
            assertParamExists('createReferralUser', 'referralLink', referralLink)
            const localVarPath = `/create_referral_user/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(referralLink, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Referral Link
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralLink: async (tgId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('getReferralLink', 'tgId', tgId)
            const localVarPath = `/get_referral_link/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User Progress
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProgress: async (tgId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('getUserProgress', 'tgId', tgId)
            const localVarPath = `/get_user/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save Progress
         * @param {number} tgId The tg ID of user
         * @param {TapTokenBody} tapTokenBody Tap Token Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveProgress: async (tgId: number, tapTokenBody: TapTokenBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tgId' is not null or undefined
            assertParamExists('saveProgress', 'tgId', tgId)
            // verify required parameter 'tapTokenBody' is not null or undefined
            assertParamExists('saveProgress', 'tapTokenBody', tapTokenBody)
            const localVarPath = `/save_progress/{tg_id}`
                .replace(`{${"tg_id"}}`, encodeURIComponent(String(tgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tapTokenBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bind User Wallet
         * @param {number} tgId The tg ID of user
         * @param {WalletBody} walletBody Wallet body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bindUserWallet(tgId: number, walletBody: WalletBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bindUserWallet(tgId, walletBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.bindUserWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Collect Referral Earn
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectReferralEarn(tgId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferralBalance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectReferralEarn(tgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.collectReferralEarn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Referral User
         * @param {number} tgId The tg ID of user
         * @param {ReferralLink} referralLink Referral Link Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReferralUser(tgId: number, referralLink: ReferralLink, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReferralUser(tgId, referralLink, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createReferralUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Referral Link
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferralLink(tgId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferralLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferralLink(tgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getReferralLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User Progress
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProgress(tgId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProgress(tgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserProgress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Save Progress
         * @param {number} tgId The tg ID of user
         * @param {TapTokenBody} tapTokenBody Tap Token Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveProgress(tgId: number, tapTokenBody: TapTokenBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveProgress(tgId, tapTokenBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.saveProgress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Bind User Wallet
         * @param {number} tgId The tg ID of user
         * @param {WalletBody} walletBody Wallet body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindUserWallet(tgId: number, walletBody: WalletBody, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.bindUserWallet(tgId, walletBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Collect Referral Earn
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectReferralEarn(tgId: number, options?: RawAxiosRequestConfig): AxiosPromise<ReferralBalance> {
            return localVarFp.collectReferralEarn(tgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Referral User
         * @param {number} tgId The tg ID of user
         * @param {ReferralLink} referralLink Referral Link Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferralUser(tgId: number, referralLink: ReferralLink, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.createReferralUser(tgId, referralLink, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Referral Link
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralLink(tgId: number, options?: RawAxiosRequestConfig): AxiosPromise<ReferralLink> {
            return localVarFp.getReferralLink(tgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User Progress
         * @param {number} tgId The tg ID of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProgress(tgId: number, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUserProgress(tgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save Progress
         * @param {number} tgId The tg ID of user
         * @param {TapTokenBody} tapTokenBody Tap Token Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveProgress(tgId: number, tapTokenBody: TapTokenBody, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.saveProgress(tgId, tapTokenBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Bind User Wallet
     * @param {number} tgId The tg ID of user
     * @param {WalletBody} walletBody Wallet body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public bindUserWallet(tgId: number, walletBody: WalletBody, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).bindUserWallet(tgId, walletBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Collect Referral Earn
     * @param {number} tgId The tg ID of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public collectReferralEarn(tgId: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).collectReferralEarn(tgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Referral User
     * @param {number} tgId The tg ID of user
     * @param {ReferralLink} referralLink Referral Link Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createReferralUser(tgId: number, referralLink: ReferralLink, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).createReferralUser(tgId, referralLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Referral Link
     * @param {number} tgId The tg ID of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getReferralLink(tgId: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getReferralLink(tgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User Progress
     * @param {number} tgId The tg ID of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserProgress(tgId: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserProgress(tgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save Progress
     * @param {number} tgId The tg ID of user
     * @param {TapTokenBody} tapTokenBody Tap Token Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public saveProgress(tgId: number, tapTokenBody: TapTokenBody, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).saveProgress(tgId, tapTokenBody, options).then((request) => request(this.axios, this.basePath));
    }
}



